/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'com.datastax.oss:java-driver-core:4.14.0'
    implementation 'io.github.resilience4j:resilience4j-retry:1.7.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:[2.13.2.1,)'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.partiql:partiql-lang-kotlin:0.7.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.7.0'
    implementation 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
    implementation 'info.picocli:picocli:4.6.3'
    implementation 'com.datastax.oss:java-driver-query-builder:4.14.0'
    implementation 'software.aws.mcs:aws-sigv4-auth-cassandra-java-driver-plugin:4.0.5'
    implementation 'software.amazon.awssdk:dynamodb:2.17.91'
    implementation 'net.spy:spymemcached:2.12.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.12.3'
    implementation 'org.xerial.snappy:snappy-java:1.1.8.4'
    implementation 'io.github.resilience4j:resilience4j-ratelimiter:1.7.1'
    implementation 'org.lz4:lz4-java:1.4.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.platform:junit-platform-console-standalone:1.8.1'
}

group = 'groupId'
version = '1.0-SNAPSHOT'
description = 'CQLReplicator'
java.sourceCompatibility = JavaVersion.VERSION_11

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}


// Include dependent libraries in archive.

jar {
    duplicatesStrategy = 'include'

    manifest {
        attributes "Main-Class": "com.amazon.aws.cqlreplicator.Starter"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyLib(type: Copy) {
    dependsOn 'jar'
    mkdir "$buildDir/dist/CQLReplicator/lib"
    from "$buildDir/libs/CQLReplicator-1.0-SNAPSHOT.jar"
    into "$buildDir/dist/CQLReplicator/lib"
}

configure(copyLib) {
    group = 'CopyGroup'
    description = 'Copying JAR to dist directory'
}

task copyBin(type: Copy) {
    mkdir "$buildDir/dist/CQLReplicator/bin"
    from "src/main/bin"
    into "$buildDir/dist/CQLReplicator/bin"
}

configure(copyBin) {
    group = 'CopyGroup'
    description = 'Copying cqlreplicator.sh source code to dist directory'
}

task copyConf(type: Copy) {
    mkdir "$buildDir/dist/CQLReplicator/conf"
    from "src/main/conf"
    into "$buildDir/dist/CQLReplicator/conf"
}

configure(copyConf) {
    group = 'CopyGroup'
    description = 'Copying configuration files to dist directory'
}

task deploy(type: GradleBuild) {
    tasks = ['copyLib', 'copyBin', 'copyConf', 'buildZip']
}

task buildZip(type: Zip) {
    mkdir "${project.rootDir}/deploy"
    from "$buildDir/dist"
    archiveName "CQLReplicator.zip"
    destinationDir(new File(project.projectDir.getAbsolutePath() + "/deploy"))
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}




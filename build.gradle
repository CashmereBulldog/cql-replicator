/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'base'
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation ("com.datastax.oss:java-driver-core:${project.javaDriverCoreVersion}")
    implementation ("io.github.resilience4j:resilience4j-retry:${project.resilience4jVersion}")
    implementation ("org.apache.commons:commons-lang3:${project.commonsLang3Version}")
    implementation ("org.partiql:partiql-lang-kotlin:${project.partiqlVersion}")
    implementation ("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${project.kotlinStdlibVersion}")
    implementation ("org.jetbrains.kotlin:kotlin-stdlib:${project.kotlinStdlibVersion}")
    implementation ("org.jetbrains.kotlin:kotlin-gradle-plugin:${project.kotlinStdlibVersion}")
    implementation ("commons-codec:commons-codec:${project.commonsCodecVersion}")
    implementation ("ch.qos.logback:logback-classic:${project.logbackClassicVersion}")
    implementation ("info.picocli:picocli:${project.picocliVersion}")
    implementation ("com.datastax.oss:java-driver-query-builder:${project.javaDriverCoreVersion}")
    implementation ("software.aws.mcs:aws-sigv4-auth-cassandra-java-driver-plugin:${project.sigv4Version}")
    implementation ("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${project.cborVersion}")
    implementation ("org.xerial.snappy:snappy-java:${project.snappyVersion}")
    implementation ("org.lz4:lz4-java:${project.lz4Version}")
    implementation ("org.iq80.leveldb:leveldb-api:${project.leveldbVersion}")
    implementation ("org.iq80.leveldb:leveldb:${project.leveldbVersion}")
    implementation ("commons-io:commons-io:${project.commonsIoVersion}")
    implementation ("software.amazon.awssdk:cloudwatch:${project.cloudwatchVersion}")
    compileOnly("org.jetbrains:annotations:${project.annotationsVersion}")
    implementation("io.vertx:vertx-web:${project.vertxVersion}") {
        exclude group: 'junit', module: 'junit'
    }
    implementation ("io.vertx:vertx-health-check:${project.vertxVersion}")
    implementation("io.vertx:vertx-dropwizard-metrics:${project.vertxVersion}")
    implementation("io.vertx:vertx-web-client:${project.vertxVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testImplementation 'org.junit.platform:junit-platform-console-standalone:1.8.1'
    testImplementation 'org.cassandraunit:cassandra-unit:4.3.1.0'
}

group = 'groupId'
version = '1.0-SNAPSHOT'
description = 'CQLReplicator'
java.sourceCompatibility = JavaVersion.VERSION_17

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}


// Include dependent libraries in archive.

jar {
    duplicatesStrategy = 'include'
    zip64 true

    manifest {
        attributes "Main-Class": "com.amazon.aws.cqlreplicator.Starter"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyLib(type: Copy) {
    dependsOn 'jar'
    mkdir "$buildDir/dist/CQLReplicator/lib"
    from "$buildDir/libs/CQLReplicator-1.0-SNAPSHOT.jar"
    into "$buildDir/dist/CQLReplicator/lib"
}

configure(copyLib) {
    group = 'CopyGroup'
    description = 'Copying JAR to dist directory'
}

task copyBin(type: Copy) {
    mkdir "$buildDir/dist/CQLReplicator/bin"
    from "src/main/bin"
    into "$buildDir/dist/CQLReplicator/bin"
}

configure(copyBin) {
    group = 'CopyGroup'
    description = 'Copying cqlreplicator.sh source code to dist directory'
}

task copyConf(type: Copy) {
    mkdir "$buildDir/dist/CQLReplicator/conf"
    from "src/main/conf"
    into "$buildDir/dist/CQLReplicator/conf"
}

configure(copyConf) {
    group = 'CopyGroup'
    description = 'Copying configuration files to dist directory'
}

task deploy(type: GradleBuild) {
    tasks = ['copyLib', 'copyBin', 'copyConf', 'buildZip']
}

task buildZip(type: Zip) {
    mkdir "${project.rootDir}/docker"
    from "$buildDir/dist"
    archiveName "CQLReplicator.zip"
    destinationDir(new File(project.projectDir.getAbsolutePath() + "/docker"))
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}




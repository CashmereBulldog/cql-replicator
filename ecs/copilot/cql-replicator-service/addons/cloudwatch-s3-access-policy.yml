Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: Your workload's name.
Resources:
  # Create a new IAM policy that allows the task role to put logs to CloudWatch
  CloudWatchFullAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:*
              - cloudwatch:*
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetBucketTagging
              - s3:CreateBucket
              - s3:ListBucket
              - s3:GetBucketVersioning
              - s3:PutBucketCORS
              - s3:GetBucketAcl
              - s3:DeleteBucketPolicy
              - s3:GetBucketPolicy
              - s3:PutEncryptionConfiguration
              - s3:GetEncryptionConfiguration
              - s3:PutBucketTagging
              - s3:GetBucketCORS
              - s3:PutBucketAcl
              - s3:PutBucketPolicy
              - s3:GetBucketLocation
              - s3:DeleteBucket
              - s3:PutBucketVersioning
            Effect: Allow
            Resource: arn:aws:s3:::*
          - Action:
              - s3:DeleteObjectTagging
              - s3:PutObject
              - s3:GetObjectAcl
              - s3:GetObject
              - s3:DeleteObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectTagging
              - s3:PutObjectTagging
              - s3:DeleteObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource: arn:aws:s3:::*/*
          - Action: s3:ListAllMyBuckets
            Effect: Allow
            Resource: "*"
Outputs:
  CloudWatchFullAccessPolicyArn:
    Description: An addon ManagedPolicy gets used by the ECS task role
    Value: !Ref CloudWatchFullAccessPolicy